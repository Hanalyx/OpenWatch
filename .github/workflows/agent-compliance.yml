name: Agent Onboarding Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  compliance-check:
    name: Verify Agent Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for commit analysis
      
      - name: Check commit format
        run: |
          # Check last 10 commits for conventional format
          commits=$(git log --oneline -10 --format="%s")
          invalid=0
          
          while IFS= read -r commit; do
            if ! echo "$commit" | grep -qE '^(feat|fix|docs|style|refactor|test|chore)(\([a-zA-Z0-9-]+\))?:'; then
              echo "‚ùå Invalid commit format: $commit"
              invalid=$((invalid + 1))
            fi
          done <<< "$commits"
          
          if [ $invalid -gt 0 ]; then
            echo "Found $invalid commits not following conventional format"
            echo "See: https://www.conventionalcommits.org/"
            exit 1
          fi
          
          echo "‚úÖ All commits follow conventional format"
      
      - name: Check author emails
        run: |
          # Verify author emails follow required format
          emails=$(git log --format="%ae" -10 | sort -u)
          invalid=0
          
          while IFS= read -r email; do
            if [[ "$email" != *"@hanalyx.com" ]] && [[ "$email" != *"@gonaibo.com" ]]; then
              echo "‚ùå Non-compliant email: $email"
              echo "   Expected format: initials+id@hanalyx.com"
              invalid=$((invalid + 1))
            fi
          done <<< "$emails"
          
          if [ $invalid -gt 0 ]; then
            echo "Found $invalid non-compliant email addresses"
            exit 1
          fi
          
          echo "‚úÖ All author emails compliant"
      
      - name: Check file naming conventions
        run: |
          # Find files violating naming conventions
          violations=$(find . -type f -name "*test*" | grep -v "^./tests/" | grep -v "^./.workspace/" | grep -v "node_modules" | grep -v ".git" || true)
          
          if [ -n "$violations" ]; then
            echo "‚ùå Found files with 'test' in permanent locations:"
            echo "$violations"
            echo ""
            echo "Files with 'test' in name are considered temporary."
            echo "See AGENT_ONBOARDING.md section 10"
            exit 1
          fi
          
          echo "‚úÖ No file naming violations found"
      
      - name: Check workspace compliance
        run: |
          # Find misplaced temporary files
          workspace_violations=$(find . -type f \( \
            -name "test_*.py" -o \
            -name "*_test.py" -o \
            -name "*_memory.yml" -o \
            -name "screenshot*.png" -o \
            -name "*_REPORT.md" -o \
            -name "*VALIDATION*.md" -o \
            -name "*_SUMMARY.md" \
          \) | grep -v "^./tests/" | grep -v "^./.workspace/" | grep -v "node_modules" | grep -v ".git" || true)
          
          if [ -n "$workspace_violations" ]; then
            echo "‚ùå Found temporary files outside .workspace/:"
            echo "$workspace_violations"
            echo ""
            echo "Move temporary files to .workspace/ subdirectories"
            echo "See WORKSPACE_STRUCTURE.md for guidelines"
            exit 1
          fi
          
          echo "‚úÖ Workspace compliance check passed"
      
      - name: Check for sensitive files
        run: |
          # Check for accidentally committed sensitive files
          sensitive=$(find . -type f \( -name "*.pem" -o -name "*.key" -o -name ".env" \) | grep -v ".git" || true)
          
          if [ -n "$sensitive" ]; then
            echo "‚ùå Found potentially sensitive files:"
            echo "$sensitive"
            exit 1
          fi
          
          echo "‚úÖ No sensitive files detected"
      
      - name: Verify co-authorship
        if: contains(github.event.head_commit.message, 'Claude')
        run: |
          # If Claude is mentioned, verify co-authorship
          if ! git log -1 --format=%B | grep -q "Co-authored-by:"; then
            echo "‚ùå Missing co-authorship for Claude collaboration"
            echo "Add: Co-authored-by: Claude <claude@anthropic.com>"
            exit 1
          fi
          
          echo "‚úÖ Co-authorship properly attributed"
      
      - name: Generate compliance report
        if: always()
        run: |
          echo "## üìä Compliance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Commit Format | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Author Emails | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| File Naming | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full compliance with AGENT_ONBOARDING.md guidelines" >> $GITHUB_STEP_SUMMARY