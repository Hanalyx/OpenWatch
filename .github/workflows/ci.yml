name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Backend Testing and Building
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: openwatch
          POSTGRES_PASSWORD: openwatch_test
          POSTGRES_DB: openwatch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy bandit safety

      - name: Run linting
        working-directory: ./backend
        run: |
          echo "Running Black formatter check..."
          black --check app/
          
          echo "Running Flake8 linter..."
          flake8 app/ --max-line-length=120 --extend-ignore=E203,W503
          
          echo "Running type checking with mypy..."
          mypy app/ --ignore-missing-imports || true

      - name: Run security checks
        working-directory: ./backend
        run: |
          echo "Running Bandit security linter..."
          bandit -r app/ -f json -o bandit-report.json || true
          
          echo "Checking dependencies for vulnerabilities..."
          safety check --json || true

      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://openwatch:openwatch_test@localhost:5432/openwatch_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_KEY: test_secret_key_for_ci
          ENVIRONMENT: test
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html || true

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/htmlcov/

      - name: Build Docker image
        run: |
          docker build -f docker/Dockerfile.backend -t openwatch-backend:${{ github.sha }} .

  # Frontend Testing and Building
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: |
          echo "Running ESLint..."
          npm run lint || true
          
          echo "Running TypeScript type check..."
          npx tsc --noEmit

      - name: Run tests
        working-directory: ./frontend
        run: |
          echo "Running tests..."
          npm test -- --passWithNoTests || true

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Build Docker image
        run: |
          docker build -f docker/Dockerfile.frontend -t openwatch-frontend:${{ github.sha }} .

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker --version
          docker compose version

      - name: Run integration tests
        run: |
          # Start services with docker compose
          docker compose up -d
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Check health endpoints
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:3000 || exit 1
          
          # Run basic API tests
          echo "Running basic API tests..."
          
          # Clean up
          docker compose down -v

  # Build and push Docker images (only on main branch)
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/openwatch-backend:latest
            ghcr.io/${{ github.repository_owner }}/openwatch-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/openwatch-frontend:latest
            ghcr.io/${{ github.repository_owner }}/openwatch-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max