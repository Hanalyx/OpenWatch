name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 pylint mypy bandit vulture radon
          cd backend && pip install -r requirements.txt

      - name: Black formatter
        run: |
          cd backend
          black --check --diff app/

      - name: Flake8 linting
        run: |
          cd backend
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

      - name: Pylint analysis
        continue-on-error: true
        run: |
          cd backend
          pylint app/ --exit-zero --output-format=json > pylint-report.json
          
          # Generate score
          python -c "
          import json
          with open('pylint-report.json') as f:
              report = json.load(f)
              if isinstance(report, dict) and 'score' in report:
                  print(f'Pylint Score: {report[\"score\"]}/10')
          "

      - name: Type checking with mypy
        continue-on-error: true
        run: |
          cd backend
          mypy app/ --ignore-missing-imports --no-error-summary

      - name: Security analysis with Bandit
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json -ll

      - name: Dead code detection
        continue-on-error: true
        run: |
          cd backend
          vulture app/ --min-confidence 80

      - name: Code complexity analysis
        run: |
          cd backend
          radon cc app/ -a -nb
          radon mi app/ -nb

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-quality-reports
          path: |
            backend/pylint-report.json
            backend/bandit-report.json

  javascript-quality:
    name: JavaScript/TypeScript Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm install -g eslint prettier typescript

      - name: ESLint
        working-directory: ./frontend
        run: |
          npm run lint -- --format json --output-file eslint-report.json || true
          
          # Also run with stylish reporter for PR comments
          npm run lint || true

      - name: Prettier check
        working-directory: ./frontend
        run: |
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,scss,json}"

      - name: TypeScript compilation
        working-directory: ./frontend
        run: |
          npx tsc --noEmit --pretty

      - name: Check for unused dependencies
        working-directory: ./frontend
        continue-on-error: true
        run: |
          npx depcheck

      - name: Bundle size analysis
        working-directory: ./frontend
        run: |
          npm run build
          
          # Analyze bundle size
          echo "Bundle Size Report:"
          du -sh dist/*

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: javascript-quality-reports
          path: |
            frontend/eslint-report.json

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  code-coverage:
    name: Code Coverage Report
    runs-on: ubuntu-latest
    needs: [python-quality, javascript-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'

      - name: Generate Python coverage
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pytest tests/ --cov=app --cov-report=xml --cov-report=term || true

      - name: Generate JavaScript coverage
        working-directory: ./frontend
        run: |
          npm ci
          npm test -- --coverage --watchAll=false || true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage.xml,./frontend/coverage/lcov.info
          flags: unittests
          name: openwatch-coverage
          fail_ci_if_error: false