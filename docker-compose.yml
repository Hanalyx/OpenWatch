services:
  database:
    image: postgres:15.10-alpine
    container_name: openwatch-db
    environment:
      POSTGRES_DB: openwatch
      POSTGRES_USER: openwatch
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - openwatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U openwatch -d openwatch"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

  # Redis with TLS for Celery
  redis:
    image: redis:7.4.1-alpine
    container_name: openwatch-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - openwatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # MongoDB for Compliance Rules
  mongodb:
    image: mongo:7.0.15-jammy
    container_name: openwatch-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-openwatch}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-secure_mongo_password}
      MONGO_INITDB_DATABASE: openwatch_rules
    volumes:
      - mongodb_data:/data/db
      - ./backend/app/data/mongo/init:/docker-entrypoint-initdb.d:ro
      - ./security/certs/mongodb:/etc/ssl:ro
    ports:
      - "127.0.0.1:27017:27017"
    networks:
      - openwatch-network
    command: >
      mongod
      --auth
      --bind_ip_all
      --tlsMode allowTLS
      --tlsCertificateKeyFile /etc/ssl/mongodb.pem
      --tlsCAFile /etc/ssl/ca.crt
      --logpath /var/log/mongodb/mongod.log
      --logappend
    healthcheck:
      test: |
        echo 'db.runCommand({serverStatus: 1}).ok' | mongosh --host localhost:27017 \
        -u ${MONGO_ROOT_USER:-openwatch} -p ${MONGO_ROOT_PASSWORD:-secure_mongo_password} \
        --authenticationDatabase admin --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: openwatch-backend
    environment:
      OPENWATCH_DATABASE_URL: postgresql://openwatch:${POSTGRES_PASSWORD}@database:5432/openwatch
      OPENWATCH_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      OPENWATCH_MONGODB_URL: mongodb://openwatch:${MONGO_ROOT_PASSWORD:-secure_mongo_password}@mongodb:27017/openwatch_rules?authSource=admin
      OPENWATCH_SECRET_KEY: ${OPENWATCH_SECRET_KEY}
      OPENWATCH_MASTER_KEY: ${MASTER_KEY}
      OPENWATCH_ENCRYPTION_KEY: ${OPENWATCH_ENCRYPTION_KEY}
      OPENWATCH_FIPS_MODE: "false"
      OPENWATCH_REQUIRE_HTTPS: "false"
      OPENWATCH_DEBUG: "true"
      # Feature Flags - OW-REFACTOR
      OPENWATCH_USE_QUERY_BUILDER: "${OPENWATCH_USE_QUERY_BUILDER:-false}"
      OPENWATCH_USE_REPOSITORY_PATTERN: "${OPENWATCH_USE_REPOSITORY_PATTERN:-false}"
      # Compliance Bundle Signature Verification
      REQUIRE_BUNDLE_SIGNATURE: "${REQUIRE_BUNDLE_SIGNATURE:-false}"  # Set to true in production
      # SSH Configuration - Unified SSH Service
      OPENWATCH_SSH_STRICT_MODE: "false"
      # OPENWATCH_STRICT_SSH: "false"        # Uncomment to force RejectPolicy
      # OPENWATCH_PERMISSIVE_SSH: "false"    # Uncomment to force AutoAddPolicy
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ./security/certs:/app/security/certs:ro
      - ./security/keys:/app/security/keys
      - ./backend/security/compliance_bundle_keys:/app/security/compliance_bundle_keys:ro
      - ssh_known_hosts:/app/security/known_hosts
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - openwatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: openwatch-worker
    command: ["python3", "-m", "celery", "-A", "backend.app.celery_app", "worker", "--loglevel=info", "-Q", "default,scans,results,maintenance,monitoring,host_monitoring"]
    environment:
      OPENWATCH_DATABASE_URL: postgresql://openwatch:${POSTGRES_PASSWORD}@database:5432/openwatch
      OPENWATCH_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      OPENWATCH_MONGODB_URL: mongodb://openwatch:${MONGO_ROOT_PASSWORD:-secure_mongo_password}@mongodb:27017/openwatch_rules?authSource=admin
      OPENWATCH_SECRET_KEY: ${OPENWATCH_SECRET_KEY}
      OPENWATCH_MASTER_KEY: ${MASTER_KEY}
      OPENWATCH_ENCRYPTION_KEY: ${OPENWATCH_ENCRYPTION_KEY}
      OPENWATCH_FIPS_MODE: "false"
      OPENWATCH_DEBUG: "true"
      # SSH Configuration - Unified SSH Service
      OPENWATCH_SSH_STRICT_MODE: "false"
      # OPENWATCH_STRICT_SSH: "false"        # Uncomment to force RejectPolicy
      # OPENWATCH_PERMISSIVE_SSH: "false"    # Uncomment to force AutoAddPolicy
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ./security/certs:/app/security/certs:ro
      - ./security/keys:/app/security/keys
      - ssh_known_hosts:/app/security/known_hosts
    depends_on:
      - database
      - redis
    networks:
      - openwatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3.9", "-m", "celery", "-A", "backend.app.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: openwatch-celery-beat
    command: ["python3", "-m", "celery", "-A", "backend.app.celery_app", "beat", "--loglevel=info"]
    healthcheck:
      disable: true
    environment:
      OPENWATCH_DATABASE_URL: postgresql://openwatch:${POSTGRES_PASSWORD}@database:5432/openwatch
      OPENWATCH_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      OPENWATCH_MONGODB_URL: mongodb://openwatch:${MONGO_ROOT_PASSWORD:-secure_mongo_password}@mongodb:27017/openwatch_rules?authSource=admin
      OPENWATCH_SECRET_KEY: ${OPENWATCH_SECRET_KEY}
      OPENWATCH_MASTER_KEY: ${MASTER_KEY}
      OPENWATCH_ENCRYPTION_KEY: ${OPENWATCH_ENCRYPTION_KEY}
      OPENWATCH_FIPS_MODE: "false"
      OPENWATCH_DEBUG: "true"
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ./security/certs:/app/security/certs:ro
      - ./security/keys:/app/security/keys
    depends_on:
      - database
      - redis
    networks:
      - openwatch-network
    restart: unless-stopped

  # React Frontend (HTTPS only)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: openwatch-frontend
    ports:
      - "3000:80"  # Redirect to HTTPS
    volumes:
      - ./security/certs/frontend.crt:/etc/ssl/certs/frontend.crt:ro
      - ./security/keys/frontend.key:/etc/ssl/private/frontend.key:ro
    environment:
      REACT_APP_API_URL: https://localhost:8000
      HTTPS: "true"
    depends_on:
      - backend
    networks:
      - openwatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  ssh_known_hosts:
    driver: local

networks:
  openwatch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16