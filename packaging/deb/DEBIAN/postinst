#!/bin/bash
# OpenWatch Debian Post-Installation Script
# Configure system after package installation

set -e

# Package name
PACKAGE="openwatch"

# Configuration paths
CONFIG_DIR="/etc/openwatch"
SECRETS_FILE="$CONFIG_DIR/secrets.env"
CONFIG_FILE="$CONFIG_DIR/ow.yml"
SSH_DIR="$CONFIG_DIR/ssh"

# Service user
SERVICE_USER="openwatch"
SERVICE_GROUP="openwatch"

# Colors for output
if [ -t 1 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
else
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

log_info() {
    echo -e "${BLUE}openwatch:${NC} $1"
}

log_success() {
    echo -e "${GREEN}openwatch:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}openwatch:${NC} $1"
}

# Generate secure passwords
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
}

# Generate JWT key pair
generate_jwt_keys() {
    local private_key="$CONFIG_DIR/jwt_private.pem"
    local public_key="$CONFIG_DIR/jwt_public.pem"
    
    if [ ! -f "$private_key" ]; then
        log_info "Generating JWT key pair..."
        
        # Generate RSA-2048 private key
        openssl genpkey -algorithm RSA -out "$private_key" -pkeyopt rsa_keygen_bits:2048 2>/dev/null
        
        # Extract public key
        openssl pkey -in "$private_key" -pubout -out "$public_key" 2>/dev/null
        
        # Set proper permissions
        chmod 600 "$private_key"
        chmod 644 "$public_key"
        chown $SERVICE_USER:$SERVICE_GROUP "$private_key" "$public_key"
        
        log_success "JWT keys generated successfully"
    fi
}

# Configure AppArmor profile (Ubuntu-specific)
configure_apparmor() {
    if command -v aa-status >/dev/null 2>&1; then
        log_info "Configuring AppArmor profiles..."
        
        # Create AppArmor profile for OpenWatch containers
        cat > /etc/apparmor.d/openwatch-containers << 'EOF'
# OpenWatch Container AppArmor Profile
# Allows container runtimes to access OpenWatch directories

#include <tunables/global>

profile openwatch-containers flags=(attach_disconnected,mediate_deleted) {
  #include <abstractions/base>
  
  # Allow container runtime access
  /usr/bin/docker* ix,
  /usr/bin/podman* ix,
  
  # OpenWatch configuration access
  /etc/openwatch/** r,
  /etc/openwatch/secrets.env r,
  /etc/openwatch/ssh/** r,
  
  # Container data directories
  /var/lib/openwatch/** rw,
  /var/log/openwatch/** rw,
  
  # System access for containers
  /proc/sys/net/core/somaxconn r,
  /sys/fs/cgroup/** r,
  
  # Deny potentially dangerous operations
  deny /etc/passwd* w,
  deny /etc/shadow* w,
  deny /boot/** w,
}
EOF
        
        # Load the profile in complain mode initially
        if [ -f /etc/apparmor.d/openwatch-containers ]; then
            apparmor_parser -r -C /etc/apparmor.d/openwatch-containers || true
            log_success "AppArmor profile configured (complain mode)"
        fi
    fi
}

case "$1" in
    configure)
        # Create service user and group
        if ! getent group $SERVICE_GROUP >/dev/null; then
            log_info "Creating $SERVICE_GROUP group..."
            addgroup --system $SERVICE_GROUP
        fi
        
        if ! getent passwd $SERVICE_USER >/dev/null; then
            log_info "Creating $SERVICE_USER user..."
            adduser --system --ingroup $SERVICE_GROUP --home /var/lib/openwatch \
                    --shell /usr/sbin/nologin --comment "OpenWatch service account" \
                    $SERVICE_USER
        fi
        
        # Add openwatch user to container groups
        if getent group docker >/dev/null; then
            usermod -aG docker $SERVICE_USER
            log_info "Added $SERVICE_USER to docker group"
        fi
        
        if getent group podman >/dev/null; then
            usermod -aG podman $SERVICE_USER
            log_info "Added $SERVICE_USER to podman group"
        fi
        
        # Create directory structure
        log_info "Creating directory structure..."
        install -d -m 750 -o $SERVICE_USER -g $SERVICE_GROUP $CONFIG_DIR
        install -d -m 700 -o $SERVICE_USER -g $SERVICE_GROUP $SSH_DIR
        install -d -m 755 -o $SERVICE_USER -g $SERVICE_GROUP /var/lib/openwatch
        install -d -m 755 -o $SERVICE_USER -g $SERVICE_GROUP /var/log/openwatch
        install -d -m 755 -o $SERVICE_USER -g $SERVICE_GROUP /var/cache/openwatch
        
        # Generate initial configuration if it doesn't exist
        if [ ! -f "$CONFIG_FILE" ]; then
            log_info "Creating default configuration..."
            cat > "$CONFIG_FILE" << 'EOF'
# OpenWatch Configuration
# Generated by DEB package installation

runtime:
  engine: "docker"              # docker (default), podman, auto
  rootless: false               # Docker typically runs as root on Ubuntu
  compose_file: "/usr/share/openwatch/compose/docker-compose.yml"
  
database:
  host: "localhost"
  port: 5432
  name: "openwatch"
  user: "openwatch"
  ssl_mode: "prefer"
  # Password loaded from secrets.env
  
web:
  port: 3001
  bind_address: "0.0.0.0"
  ssl:
    enabled: false              # Set to true for production
    cert_path: "/etc/ssl/certs/openwatch.crt"
    key_path: "/etc/ssl/private/openwatch.key"
    
scanning:
  ssh_key_path: "/etc/openwatch/ssh/openwatch_rsa"
  concurrent_scans: 5
  timeout: 300
  scap_content_dir: "/var/lib/openwatch/scap"
  results_dir: "/var/lib/openwatch/results"

logging:
  level: "INFO"
  file: "/var/log/openwatch/openwatch.log"
  audit_file: "/var/log/openwatch/audit.log"
  max_size: "100MB"
  max_age: 30
  
security:
  fips_mode: false
  audit_logging: true
  rate_limiting: true
  session_timeout: 3600
  
# Ubuntu-specific settings
ubuntu:
  apparmor_enabled: true
  ufw_integration: false        # Enable if using UFW
EOF
            chmod 640 "$CONFIG_FILE"
            chown $SERVICE_USER:$SERVICE_GROUP "$CONFIG_FILE"
        fi
        
        # Generate secrets if they don't exist
        if [ ! -f "$SECRETS_FILE" ] || grep -q "CHANGEME" "$SECRETS_FILE" 2>/dev/null; then
            log_info "Generating secure secrets..."
            
            # Generate passwords
            DB_PASSWORD=$(generate_password)
            REDIS_PASSWORD=$(generate_password)
            SECRET_KEY=$(openssl rand -base64 48 | tr -d "=+/" | cut -c1-64)
            MASTER_KEY=$(generate_password)
            
            # Create secrets file
            cat > "$SECRETS_FILE" << EOF
# OpenWatch Secrets Configuration
# IMPORTANT: This file contains sensitive information
# Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

# Database password
POSTGRES_PASSWORD=$DB_PASSWORD

# Redis password
REDIS_PASSWORD=$REDIS_PASSWORD

# Application secrets
SECRET_KEY=$SECRET_KEY
MASTER_KEY=$MASTER_KEY

# JWT signing keys
JWT_PRIVATE_KEY_PATH=/etc/openwatch/jwt_private.pem
JWT_PUBLIC_KEY_PATH=/etc/openwatch/jwt_public.pem

# Container runtime
CONTAINER_RUNTIME=docker
EOF
            
            # Secure the secrets file
            chmod 600 "$SECRETS_FILE"
            chown $SERVICE_USER:$SERVICE_GROUP "$SECRETS_FILE"
            
            log_success "Secrets generated successfully"
        fi
        
        # Generate JWT keys
        generate_jwt_keys
        
        # Configure AppArmor
        configure_apparmor
        
        # Copy systemd service files from package
        if [ -d /usr/share/openwatch/systemd ]; then
            log_info "Installing systemd service files..."
            cp /usr/share/openwatch/systemd/*.service /etc/systemd/system/
            systemctl daemon-reload
        fi
        
        # Enable services but don't start them
        if [ -f /etc/systemd/system/openwatch.service ]; then
            systemctl enable openwatch.service || true
            systemctl enable openwatch-db.service || true
            log_success "Services enabled"
        fi
        
        # Configure log rotation
        cat > /etc/logrotate.d/openwatch << 'EOF'
/var/log/openwatch/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 0640 openwatch openwatch
    sharedscripts
    postrotate
        systemctl reload openwatch 2>/dev/null || true
    endscript
}
EOF
        
        # Ubuntu firewall configuration hint
        if command -v ufw >/dev/null 2>&1; then
            if ufw status | grep -q "Status: active"; then
                log_warning "UFW is active. To allow OpenWatch access:"
                log_warning "  sudo ufw allow 3001/tcp comment 'OpenWatch Web UI'"
            fi
        fi
        
        # Final message
        echo ""
        log_success "OpenWatch installed successfully!"
        echo ""
        echo "Next steps:"
        echo "1. Review configuration: /etc/openwatch/ow.yml"
        echo "2. Configure SSL certificates (recommended)"
        echo "3. Start services: sudo systemctl start openwatch"
        echo "4. Check status: owadm status"
        echo ""
        echo "Documentation: https://github.com/hanalyx/openwatch"
        echo ""
        ;;
        
    abort-upgrade|abort-remove|abort-deconfigure)
        ;;
        
    *)
        echo "postinst called with unknown argument '$1'" >&2
        exit 1
        ;;
esac

#DEBHELPER#

exit 0