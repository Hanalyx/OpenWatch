# OpenWatch RPM Package Specification
# Enterprise SCAP compliance scanning platform

%global commit %(git rev-parse --short HEAD 2>/dev/null || echo "unknown")

Name:           openwatch
Version:        1.2.1
Release:        1%{?dist}
Summary:        Enterprise SCAP compliance scanning and remediation platform
License:        Apache-2.0
URL:            https://github.com/hanalyx/openwatch
Source0:        %{name}-%{version}.tar.gz

# Architecture requirements
BuildArch:      x86_64
ExclusiveArch:  x86_64 aarch64

# Build requirements
BuildRequires:  golang >= 1.21
BuildRequires:  git
BuildRequires:  make

# Runtime requirements - Container runtime (one of these)
Requires:       (podman >= 4.0 or docker-ce >= 20.10)
Requires:       (podman-compose >= 1.0 or docker-compose >= 2.0)

# System requirements
Requires:       openscap-scanner >= 1.3.0
Requires:       openssh-clients
Requires:       systemd
Requires:       shadow-utils
Requires:       policycoreutils
Requires:       policycoreutils-python-utils
Requires:       selinux-policy-devel

# Optional security enhancements
Recommends:     podman >= 4.0
Recommends:     fapolicyd
Recommends:     aide

%description
OpenWatch is an enterprise-grade SCAP (Security Content Automation Protocol) 
compliance scanning and remediation platform. It provides automated security 
compliance monitoring, vulnerability assessment, and remediation capabilities 
for enterprise Linux environments.

Key features:
- SCAP-compliant security scanning
- Multi-host fleet management
- Automated remediation workflows  
- Real-time compliance dashboards
- Role-based access control
- Audit logging and reporting
- Container-based deployment

Supports RHEL 8+, Oracle Linux 8+, and other enterprise Linux distributions.

%prep
%autosetup -n %{name}-%{version}

%build
# Build owadm CLI tool
export CGO_ENABLED=0
export GOOS=linux

# Set build-time variables and correct architecture
if [ "%{_arch}" = "x86_64" ]; then
    export GOARCH=amd64
else
    export GOARCH=%{_arch}
fi

export BUILD_TIME=$(date -u '+%%Y-%%m-%%d_%%H:%%M:%%S')
export LDFLAGS="-s -w -X github.com/hanalyx/openwatch/internal/owadm/cmd.Version=%{version} -X github.com/hanalyx/openwatch/internal/owadm/cmd.Commit=%{commit} -X github.com/hanalyx/openwatch/internal/owadm/cmd.BuildTime=$BUILD_TIME"

go build -ldflags "$LDFLAGS" -o bin/owadm cmd/owadm/main.go

# Build SELinux policy if tools are available
if command -v make >/dev/null 2>&1 && [ -f /usr/share/selinux/devel/Makefile ]; then
    cd packaging/selinux
    make -f /usr/share/selinux/devel/Makefile openwatch.pp
    cd ../..
fi

%install
# Create directory structure
install -d %{buildroot}%{_bindir}
install -d %{buildroot}%{_sysconfdir}/openwatch
install -d %{buildroot}%{_sysconfdir}/openwatch/ssh
install -d %{buildroot}%{_datadir}/openwatch
install -d %{buildroot}%{_datadir}/openwatch/compose
install -d %{buildroot}%{_datadir}/openwatch/scripts
install -d %{buildroot}%{_unitdir}
install -d %{buildroot}%{_localstatedir}/lib/openwatch
install -d %{buildroot}%{_localstatedir}/log/openwatch
install -d %{buildroot}%{_localstatedir}/cache/openwatch

# Install owadm binary
install -m 0755 bin/owadm %{buildroot}%{_bindir}/owadm

# Install container orchestration files
install -m 0644 docker-compose.yml %{buildroot}%{_datadir}/openwatch/compose/docker-compose.yml
install -m 0644 podman-compose.yml %{buildroot}%{_datadir}/openwatch/compose/podman-compose.yml

# Install configuration templates
cat > %{buildroot}%{_sysconfdir}/openwatch/ow.yml << 'EOF'
# OpenWatch Configuration
# Generated by RPM package installation

runtime:
  engine: "podman"              # podman (default), docker, auto
  rootless: true                # Use rootless containers (recommended)
  compose_file: "/usr/share/openwatch/compose/podman-compose.yml"
  
database:
  host: "localhost"
  port: 5432
  name: "openwatch"
  user: "openwatch"
  ssl_mode: "require"
  # Password loaded from secrets.env
  
web:
  port: 3001
  bind_address: "0.0.0.0"
  ssl:
    enabled: false              # Set to true for production
    cert_path: "/etc/ssl/certs/openwatch.crt"
    key_path: "/etc/ssl/private/openwatch.key"
    
scanning:
  ssh_key_path: "/etc/openwatch/ssh/openwatch_rsa"
  concurrent_scans: 5
  timeout: 300
  scap_content_dir: "/var/lib/openwatch/scap"
  results_dir: "/var/lib/openwatch/results"

logging:
  level: "INFO"
  file: "/var/log/openwatch/openwatch.log"
  audit_file: "/var/log/openwatch/audit.log"
  max_size: "100MB"
  max_age: 30
  
security:
  fips_mode: false              # Enable for FIPS 140-2 compliance
  audit_logging: true
  rate_limiting: true
  session_timeout: 3600
EOF

# Install secrets template (will be configured by admin)
cat > %{buildroot}%{_sysconfdir}/openwatch/secrets.env << 'EOF'
# OpenWatch Secrets Configuration
# IMPORTANT: Secure this file with chmod 600 and set proper ownership

# Database password
POSTGRES_PASSWORD=CHANGEME_SECURE_DB_PASSWORD

# Redis password
REDIS_PASSWORD=CHANGEME_SECURE_REDIS_PASSWORD

# Application secrets
SECRET_KEY=CHANGEME_64_CHAR_SECRET_KEY
MASTER_KEY=CHANGEME_32_CHAR_MASTER_KEY

# JWT signing keys (auto-generated by post-install script)
JWT_PRIVATE_KEY_PATH=/etc/openwatch/jwt_private.pem
JWT_PUBLIC_KEY_PATH=/etc/openwatch/jwt_public.pem
EOF

# Install systemd service files
cat > %{buildroot}%{_unitdir}/openwatch.service << 'EOF'
[Unit]
Description=OpenWatch SCAP Compliance Platform
Documentation=https://github.com/hanalyx/openwatch
Requires=openwatch-db.service
After=network-online.target openwatch-db.service
Wants=network-online.target

[Service]
Type=forking
User=openwatch
Group=openwatch
EnvironmentFile=/etc/openwatch/secrets.env
ExecStartPre=/usr/bin/owadm validate-config
ExecStart=/usr/bin/owadm start --daemon
ExecStop=/usr/bin/owadm stop
ExecReload=/usr/bin/owadm restart
Restart=on-failure
RestartSec=10
KillMode=mixed
TimeoutStartSec=300
TimeoutStopSec=120

# Security settings
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/var/lib/openwatch /var/log/openwatch /etc/openwatch
PrivateTmp=true
ProtectKernelTunables=true
ProtectControlGroups=true
RestrictRealtime=true
LockPersonality=true

[Install]
WantedBy=multi-user.target
EOF

cat > %{buildroot}%{_unitdir}/openwatch-db.service << 'EOF'
[Unit]
Description=OpenWatch Database Container
Documentation=https://github.com/hanalyx/openwatch
After=network-online.target
Wants=network-online.target

[Service]
Type=forking
User=openwatch
Group=openwatch
EnvironmentFile=/etc/openwatch/secrets.env
ExecStartPre=/usr/bin/owadm validate-config --database-only
ExecStart=/usr/bin/owadm start --database-only --daemon
ExecStop=/usr/bin/owadm stop --database-only
Restart=on-failure
RestartSec=5
TimeoutStartSec=60
TimeoutStopSec=30

# Security settings
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/var/lib/openwatch
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF

# Install SELinux policy files
install -d %{buildroot}%{_datadir}/selinux/packages
install -m 0644 packaging/selinux/openwatch.pp %{buildroot}%{_datadir}/selinux/packages/openwatch.pp

# Install fapolicyd configuration scripts
install -m 0755 packaging/rpm/scripts/configure-fapolicyd.sh %{buildroot}%{_datadir}/openwatch/scripts/configure-fapolicyd.sh
install -m 0755 packaging/rpm/scripts/fapolicyd-troubleshoot.sh %{buildroot}%{_datadir}/openwatch/scripts/fapolicyd-troubleshoot.sh

# Install fapolicyd rules template
install -d %{buildroot}%{_datadir}/openwatch/templates
install -m 0644 packaging/rpm/templates/90-openwatch.rules %{buildroot}%{_datadir}/openwatch/templates/90-openwatch.rules

# Install helper scripts
cat > %{buildroot}%{_datadir}/openwatch/scripts/generate-secrets.sh << 'EOF'
#!/bin/bash
# OpenWatch Secret Generation Script

set -euo pipefail

SECRETS_FILE="/etc/openwatch/secrets.env"
CONFIG_DIR="/etc/openwatch"

# Generate secure random passwords
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
}

# Generate JWT key pair
generate_jwt_keys() {
    local private_key="$CONFIG_DIR/jwt_private.pem"
    local public_key="$CONFIG_DIR/jwt_public.pem"
    
    # Generate RSA-2048 private key
    openssl genpkey -algorithm RSA -out "$private_key" -pkcs8 -pkeyopt rsa_keygen_bits:2048
    
    # Extract public key
    openssl pkey -in "$private_key" -pubout -out "$public_key"
    
    # Set proper permissions
    chmod 600 "$private_key"
    chmod 644 "$public_key"
    chown openwatch:openwatch "$private_key" "$public_key"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" >&2
    exit 1
fi

echo "Generating OpenWatch secrets..."

# Generate secrets
DB_PASSWORD=$(generate_password)
REDIS_PASSWORD=$(generate_password)
SECRET_KEY=$(openssl rand -base64 48 | tr -d "=+/" | cut -c1-64)
MASTER_KEY=$(generate_password)

# Update secrets file
sed -i "s/CHANGEME_SECURE_DB_PASSWORD/$DB_PASSWORD/" "$SECRETS_FILE"
sed -i "s/CHANGEME_SECURE_REDIS_PASSWORD/$REDIS_PASSWORD/" "$SECRETS_FILE"
sed -i "s/CHANGEME_64_CHAR_SECRET_KEY/$SECRET_KEY/" "$SECRETS_FILE"
sed -i "s/CHANGEME_32_CHAR_MASTER_KEY/$MASTER_KEY/" "$SECRETS_FILE"

# Generate JWT keys
generate_jwt_keys

# Secure the secrets file
chmod 600 "$SECRETS_FILE"
chown openwatch:openwatch "$SECRETS_FILE"

echo "✅ Secrets generated successfully"
echo "⚠️  Please review and customize /etc/openwatch/ow.yml"
echo "🔐 Secrets stored securely in $SECRETS_FILE"
EOF

chmod +x %{buildroot}%{_datadir}/openwatch/scripts/generate-secrets.sh

%pre
# Create openwatch user and group
getent group openwatch >/dev/null || groupadd -r openwatch
getent passwd openwatch >/dev/null || \
    useradd -r -g openwatch -d /var/lib/openwatch -s /sbin/nologin \
    -c "OpenWatch service account" openwatch

# Add openwatch user to container groups if they exist
if getent group podman >/dev/null; then
    usermod -aG podman openwatch
fi
if getent group docker >/dev/null; then
    usermod -aG docker openwatch
fi

%post
# Set proper ownership and permissions
chown -R openwatch:openwatch /etc/openwatch
chown -R openwatch:openwatch /var/lib/openwatch
chown -R openwatch:openwatch /var/log/openwatch

# Set restrictive permissions on config directory
chmod 750 /etc/openwatch
chmod 700 /etc/openwatch/ssh
chmod 600 /etc/openwatch/secrets.env

# Generate initial secrets if they don't exist
if grep -q "CHANGEME" /etc/openwatch/secrets.env; then
    echo "Generating initial secrets..."
    /usr/share/openwatch/scripts/generate-secrets.sh
fi

# Install and configure SELinux policy for RHEL/Oracle Linux
if command -v semanage >/dev/null 2>&1 && getenforce | grep -q "Enforcing\|Permissive"; then
    echo "Installing OpenWatch SELinux policy..."
    
    # Install policy module
    if [ -f /usr/share/selinux/packages/openwatch.pp ]; then
        semodule -i /usr/share/selinux/packages/openwatch.pp
        echo "✅ SELinux policy module installed"
    fi
    
    # Apply file contexts
    if [ -d /etc/openwatch ]; then
        restorecon -R /etc/openwatch
    fi
    if [ -d /var/lib/openwatch ]; then
        restorecon -R /var/lib/openwatch  
    fi
    if [ -d /var/log/openwatch ]; then
        restorecon -R /var/log/openwatch
    fi
    if [ -f /usr/bin/owadm ]; then
        restorecon /usr/bin/owadm
    fi
    
    echo "✅ SELinux contexts configured"
fi

# Configure fapolicyd for OpenWatch if installed and active
if command -v fapolicyd >/dev/null 2>&1 && systemctl is-active --quiet fapolicyd; then
    echo "Configuring fapolicyd for OpenWatch..."
    /usr/share/openwatch/scripts/configure-fapolicyd.sh configure
    echo "✅ fapolicyd rules configured"
    echo "ℹ️  Use 'fapolicyd-troubleshoot.sh' if you encounter permission issues"
fi

# Enable but don't start services (let admin control startup)
%systemd_post openwatch.service openwatch-db.service

echo ""
echo "🎉 OpenWatch installed successfully!"
echo ""
echo "Next steps:"
echo "1. Review configuration: /etc/openwatch/ow.yml"
echo "2. Configure SSL certificates (recommended)"
echo "3. Start services: systemctl start openwatch"
echo "4. Check status: owadm status"
echo ""
if command -v fapolicyd >/dev/null 2>&1; then
    echo "fapolicyd detected - OpenWatch rules configured automatically"
    echo "Troubleshooting: /usr/share/openwatch/scripts/fapolicyd-troubleshoot.sh"
    echo ""
fi
echo "Documentation: https://github.com/hanalyx/openwatch"
echo ""

%preun
%systemd_preun openwatch.service openwatch-db.service

%postun
%systemd_postun_with_restart openwatch.service openwatch-db.service

# Clean up user on complete removal
if [ $1 -eq 0 ]; then
    # Remove openwatch user (but preserve data directories)
    userdel openwatch 2>/dev/null || true
    
    # Remove SELinux policy module
    if command -v semodule >/dev/null 2>&1; then
        semodule -r openwatch 2>/dev/null || true
        echo "Removed OpenWatch SELinux policy"
    fi
    
    # Clean up fapolicyd rules
    if command -v fapolicyd >/dev/null 2>&1 && [ -f /usr/share/openwatch/scripts/configure-fapolicyd.sh ]; then
        /usr/share/openwatch/scripts/configure-fapolicyd.sh cleanup
        echo "Removed OpenWatch fapolicyd rules"
    fi
fi

%files
# Main binary
%{_bindir}/owadm

# Configuration files
%dir %attr(750,openwatch,openwatch) %{_sysconfdir}/openwatch
%dir %attr(700,openwatch,openwatch) %{_sysconfdir}/openwatch/ssh
%config(noreplace) %attr(640,openwatch,openwatch) %{_sysconfdir}/openwatch/ow.yml
%config(noreplace) %attr(600,openwatch,openwatch) %{_sysconfdir}/openwatch/secrets.env

# Systemd service files
%{_unitdir}/openwatch.service
%{_unitdir}/openwatch-db.service

# Application data
%dir %attr(755,root,root) %{_datadir}/openwatch
%dir %attr(755,root,root) %{_datadir}/openwatch/compose
%dir %attr(755,root,root) %{_datadir}/openwatch/scripts
%dir %attr(755,root,root) %{_datadir}/openwatch/templates
%{_datadir}/openwatch/compose/docker-compose.yml
%{_datadir}/openwatch/compose/podman-compose.yml
%attr(755,root,root) %{_datadir}/openwatch/scripts/generate-secrets.sh
%attr(755,root,root) %{_datadir}/openwatch/scripts/configure-fapolicyd.sh
%attr(755,root,root) %{_datadir}/openwatch/scripts/fapolicyd-troubleshoot.sh
%{_datadir}/openwatch/templates/90-openwatch.rules

# SELinux policy files
%{_datadir}/selinux/packages/openwatch.pp

# Runtime directories
%dir %attr(755,openwatch,openwatch) %{_localstatedir}/lib/openwatch
%dir %attr(755,openwatch,openwatch) %{_localstatedir}/log/openwatch
%dir %attr(755,openwatch,openwatch) %{_localstatedir}/cache/openwatch

%changelog
* Wed Sep 18 2024 OpenWatch Team <admin@hanalyx.com> - 1.2.1-1
- Update to version 1.2.1
- Add fapolicyd integration for application whitelisting
- Include comprehensive fapolicyd rules for all OpenWatch components
- Add fapolicyd troubleshooting and diagnostic tools
- Automatic fapolicyd configuration during package installation
- Enhanced security for RHEL/Oracle Linux deployments

* Tue Sep 17 2024 OpenWatch Team <admin@hanalyx.com> - 1.0.0-1
- Initial RPM package for OpenWatch
- Support for RHEL 8+, Oracle Linux 8+
- Container runtime abstraction (Podman/Docker)
- Enterprise security defaults
- SELinux integration
- Systemd service management
- Automated secret generation
- FIPS compliance ready