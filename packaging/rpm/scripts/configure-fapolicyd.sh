#!/bin/bash
# OpenWatch fapolicyd Configuration Script
# Configures fapolicyd rules to allow OpenWatch operation on RHEL/Oracle Linux

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
RULES_FILE="/etc/fapolicyd/rules.d/90-openwatch.rules"
TEMPLATE_FILE="$SCRIPT_DIR/../templates/90-openwatch.rules"

# Colors for output
if [ -t 1 ]; then
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    RED='\033[0;31m'
    BLUE='\033[0;34m'
    NC='\033[0m'
else
    GREEN=''
    YELLOW=''
    RED=''
    BLUE=''
    NC=''
fi

log_info() {
    echo -e "${BLUE}openwatch-fapolicyd:${NC} $1"
}

log_success() {
    echo -e "${GREEN}openwatch-fapolicyd:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}openwatch-fapolicyd:${NC} $1"
}

log_error() {
    echo -e "${RED}openwatch-fapolicyd:${NC} $1"
}

# Check if fapolicyd is active
check_fapolicyd_status() {
    if ! command -v fapolicyd >/dev/null 2>&1; then
        log_info "fapolicyd not installed - skipping configuration"
        return 1
    fi
    
    if ! systemctl is-active --quiet fapolicyd; then
        log_info "fapolicyd not active - skipping configuration"
        return 1
    fi
    
    log_info "fapolicyd is active - configuring OpenWatch rules"
    return 0
}

# Detect container runtime
detect_container_runtime() {
    local runtimes=()
    
    if command -v podman >/dev/null 2>&1; then
        runtimes+=("podman")
    fi
    
    if command -v docker >/dev/null 2>&1; then
        runtimes+=("docker")
    fi
    
    echo "${runtimes[@]}"
}

# Create fapolicyd rules for OpenWatch
create_fapolicyd_rules() {
    log_info "Creating fapolicyd rules for OpenWatch..."
    
    # Detect available container runtimes
    local container_runtimes
    container_runtimes=($(detect_container_runtime))
    
    # Create rules file
    cat > "$RULES_FILE" << 'EOF'
# OpenWatch File Access Policy Rules
# Generated by OpenWatch RPM package installer
# 
# These rules allow OpenWatch SCAP compliance platform to operate
# with fapolicyd application whitelisting enabled on RHEL/Oracle Linux

# =============================================================================
# Core OpenWatch Components
# =============================================================================

# OpenWatch admin CLI tool
allow perm=any all : path=/usr/bin/owadm type=application/x-executable

# OpenWatch systemd integration
allow perm=execute all : path=/usr/bin/systemctl type=application/x-executable

# =============================================================================
# Container Runtime Support
# =============================================================================

# Podman (RHEL/Oracle Linux default)
allow perm=execute all : path=/usr/bin/podman type=application/x-executable
allow perm=execute all : path=/usr/bin/podman-compose type=application/x-executable
allow perm=execute all : path=/usr/bin/conmon type=application/x-executable
allow perm=execute all : path=/usr/bin/crun type=application/x-executable
allow perm=execute all : path=/usr/bin/runc type=application/x-executable

# Docker (alternative runtime)
allow perm=execute all : path=/usr/bin/docker type=application/x-executable
allow perm=execute all : path=/usr/bin/docker-compose type=application/x-executable
allow perm=execute all : path=/usr/bin/dockerd type=application/x-executable
allow perm=execute all : path=/usr/bin/containerd type=application/x-executable
allow perm=execute all : path=/usr/bin/containerd-shim type=application/x-executable
allow perm=execute all : path=/usr/bin/containerd-shim-runc-v1 type=application/x-executable
allow perm=execute all : path=/usr/bin/containerd-shim-runc-v2 type=application/x-executable

# Container image management tools
allow perm=execute all : path=/usr/bin/buildah type=application/x-executable
allow perm=execute all : path=/usr/bin/skopeo type=application/x-executable

# =============================================================================
# SCAP Scanning Tools
# =============================================================================

# OpenSCAP scanner components
allow perm=execute all : path=/usr/bin/oscap type=application/x-executable
allow perm=execute all : path=/usr/bin/oscap-ssh type=application/x-executable

# OpenSCAP library executables
allow perm=execute uid=openwatch : dir=/usr/libexec/openscap type=application/x-executable

# SCAP content validation tools
allow perm=execute uid=openwatch : path=/usr/bin/xmllint type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/xmlstarlet type=application/x-executable

# =============================================================================
# Python Runtime and Dependencies
# =============================================================================

# Python interpreter (for backend services)
allow perm=execute uid=openwatch : path=/usr/bin/python3 type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/python3.8 type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/python3.9 type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/python3.10 type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/python3.11 type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/python3.12 type=application/x-executable

# Python package management
allow perm=execute uid=openwatch : path=/usr/bin/pip3 type=application/x-executable

# =============================================================================
# System Utilities Required by OpenWatch
# =============================================================================

# Shell access for scripting
allow perm=execute uid=openwatch : path=/bin/bash type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/sh type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/bash type=application/x-executable

# SSH client for remote scanning
allow perm=execute uid=openwatch : path=/usr/bin/ssh type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/scp type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/ssh-keygen type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/ssh-copy-id type=application/x-executable

# System information gathering
allow perm=execute uid=openwatch : path=/usr/bin/uname type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/ps type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/ps type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/grep type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/grep type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/sed type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/sed type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/awk type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/awk type=application/x-executable

# File operations
allow perm=execute uid=openwatch : path=/bin/cat type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/cat type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/cp type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/cp type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/mv type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/mv type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/rm type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/rm type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/mkdir type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/mkdir type=application/x-executable

# Text processing
allow perm=execute uid=openwatch : path=/usr/bin/sort type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/uniq type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/head type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/tail type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/cut type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/tr type=application/x-executable

# Compression tools
allow perm=execute uid=openwatch : path=/usr/bin/gzip type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/gunzip type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/tar type=application/x-executable
allow perm=execute uid=openwatch : path=/bin/tar type=application/x-executable

# =============================================================================
# Directory Permissions
# =============================================================================

# OpenWatch configuration and data directories
allow perm=any uid=openwatch : dir=/etc/openwatch
allow perm=any uid=openwatch : dir=/var/lib/openwatch
allow perm=any uid=openwatch : dir=/var/log/openwatch
allow perm=any uid=openwatch : dir=/var/cache/openwatch

# Container storage directories (Podman rootless)
allow perm=any uid=openwatch : dir=/home/openwatch/.local/share/containers
allow perm=any uid=openwatch : dir=/home/openwatch/.config/containers
allow perm=any uid=openwatch : dir=/home/openwatch/.cache/containers

# Container storage directories (system-wide)
allow perm=any uid=openwatch : dir=/var/lib/containers
allow perm=any uid=openwatch : dir=/var/lib/docker

# Temporary directories for scanning operations
allow perm=any uid=openwatch : dir=/tmp
allow perm=any uid=openwatch : dir=/var/tmp

# =============================================================================
# Shared Libraries and Interpreters
# =============================================================================

# Allow execution of shared libraries in standard paths
allow perm=execute uid=openwatch : dir=/usr/lib64
allow perm=execute uid=openwatch : dir=/usr/lib
allow perm=execute uid=openwatch : dir=/lib64
allow perm=execute uid=openwatch : dir=/lib

# Python modules and packages
allow perm=execute uid=openwatch : dir=/usr/lib/python3*
allow perm=execute uid=openwatch : dir=/usr/lib64/python3*

EOF

    # Add container runtime specific rules based on detection
    for runtime in "${container_runtimes[@]}"; do
        case "$runtime" in
            podman)
                log_info "Adding Podman-specific rules"
                cat >> "$RULES_FILE" << 'EOF'

# =============================================================================
# Podman Specific Rules
# =============================================================================

# Podman rootless networking
allow perm=execute uid=openwatch : path=/usr/bin/slirp4netns type=application/x-executable
allow perm=execute uid=openwatch : path=/usr/bin/pasta type=application/x-executable

# Podman storage drivers
allow perm=execute uid=openwatch : path=/usr/bin/fuse-overlayfs type=application/x-executable

# Podman systemd integration
allow perm=execute uid=openwatch : path=/usr/bin/systemd type=application/x-executable

EOF
                ;;
            docker)
                log_info "Adding Docker-specific rules"
                cat >> "$RULES_FILE" << 'EOF'

# =============================================================================
# Docker Specific Rules  
# =============================================================================

# Docker networking
allow perm=execute all : path=/usr/bin/docker-proxy type=application/x-executable

# Docker init system
allow perm=execute all : path=/usr/bin/docker-init type=application/x-executable
allow perm=execute all : path=/usr/bin/tini type=application/x-executable

EOF
                ;;
        esac
    done
    
    # Set proper permissions
    chmod 644 "$RULES_FILE"
    
    log_success "Created fapolicyd rules: $RULES_FILE"
}

# Reload fapolicyd configuration
reload_fapolicyd() {
    log_info "Reloading fapolicyd configuration..."
    
    if systemctl reload fapolicyd; then
        log_success "fapolicyd configuration reloaded"
    else
        log_error "Failed to reload fapolicyd configuration"
        return 1
    fi
}

# Validate rules were loaded
validate_rules() {
    log_info "Validating fapolicyd rules..."
    
    # Check if rules file exists and is readable
    if [ ! -r "$RULES_FILE" ]; then
        log_error "Rules file not readable: $RULES_FILE"
        return 1
    fi
    
    # Count number of OpenWatch rules
    local rule_count
    rule_count=$(grep -c "^allow.*openwatch" "$RULES_FILE" 2>/dev/null || echo "0")
    
    if [ "$rule_count" -gt 0 ]; then
        log_success "Loaded $rule_count OpenWatch-specific fapolicyd rules"
    else
        log_warning "No OpenWatch-specific rules found in rules file"
    fi
    
    # Test if fapolicyd service is still healthy
    if systemctl is-active --quiet fapolicyd; then
        log_success "fapolicyd service is healthy after rule installation"
    else
        log_error "fapolicyd service is not healthy - check configuration"
        return 1
    fi
}

# Main configuration function
configure_fapolicyd() {
    log_info "Configuring fapolicyd for OpenWatch..."
    
    # Check if fapolicyd is available and active
    if ! check_fapolicyd_status; then
        return 0
    fi
    
    # Create backup of existing rules if they exist
    if [ -f "$RULES_FILE" ]; then
        log_info "Backing up existing OpenWatch fapolicyd rules..."
        cp "$RULES_FILE" "${RULES_FILE}.backup.$(date +%Y%m%d-%H%M%S)"
    fi
    
    # Create new rules
    create_fapolicyd_rules
    
    # Reload fapolicyd
    reload_fapolicyd
    
    # Validate configuration
    validate_rules
    
    log_success "fapolicyd configuration completed successfully"
}

# Cleanup function for package removal
cleanup_fapolicyd() {
    log_info "Cleaning up OpenWatch fapolicyd rules..."
    
    if [ -f "$RULES_FILE" ]; then
        rm -f "$RULES_FILE"
        log_info "Removed fapolicyd rules file"
        
        # Reload fapolicyd if it's still active
        if systemctl is-active --quiet fapolicyd; then
            systemctl reload fapolicyd
            log_info "Reloaded fapolicyd after cleanup"
        fi
    fi
    
    log_success "fapolicyd cleanup completed"
}

# Help function
show_help() {
    cat << EOF
OpenWatch fapolicyd Configuration Script

Usage: $0 [command]

Commands:
    configure   Configure fapolicyd rules for OpenWatch (default)
    cleanup     Remove OpenWatch fapolicyd rules
    status      Show fapolicyd status and OpenWatch rules
    help        Show this help message

Examples:
    $0 configure    # Install fapolicyd rules
    $0 cleanup      # Remove fapolicyd rules
    $0 status       # Check configuration status

EOF
}

# Status check function
show_status() {
    echo "OpenWatch fapolicyd Status"
    echo "========================="
    echo ""
    
    # Check fapolicyd service status
    if command -v fapolicyd >/dev/null 2>&1; then
        echo "fapolicyd binary: $(command -v fapolicyd)"
        echo "fapolicyd status: $(systemctl is-active fapolicyd 2>/dev/null || echo 'inactive')"
    else
        echo "fapolicyd: not installed"
    fi
    
    echo ""
    
    # Check rules file
    if [ -f "$RULES_FILE" ]; then
        echo "OpenWatch rules file: $RULES_FILE (exists)"
        local rule_count
        rule_count=$(wc -l < "$RULES_FILE")
        echo "Rule count: $rule_count lines"
        
        # Show sample rules
        echo ""
        echo "Sample rules:"
        grep "^allow.*openwatch" "$RULES_FILE" | head -3 || echo "No OpenWatch-specific rules found"
    else
        echo "OpenWatch rules file: $RULES_FILE (not found)"
    fi
    
    echo ""
    
    # Check container runtimes
    echo "Container runtimes detected:"
    for runtime in $(detect_container_runtime); do
        echo "  - $runtime: $(command -v $runtime)"
    done
}

# Main execution
main() {
    local command="${1:-configure}"
    
    case "$command" in
        configure)
            configure_fapolicyd
            ;;
        cleanup)
            cleanup_fapolicyd
            ;;
        status)
            show_status
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            show_help
            exit 1
            ;;
    esac
}

# Allow script to be sourced for testing
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi